{"ast":null,"code":"var _jsxFileName = \"/Users/krystaljoysilvestre/Documents/flexible-grid/src/components/Grid/Container/container.js\";\nimport React, { Component } from 'react';\nimport Cell from '../Cell';\nimport * as C from './style';\n\nclass Container extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.createCells = children => {\n      console.log('CHILDREN =======', children); // children.map((child, index) => (\n      //   <Cell key={index} id={child.id} config={child}>\n      //     {JSON.stringify(child)}\n      //   </Cell>\n      // ));\n    };\n  }\n\n  render() {\n    const config = this.props.config;\n    return React.createElement(C.Wrapper, {\n      id: config.id,\n      direction: config.direction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, config.children && this.createCells(config.children));\n  }\n\n}\n\nexport default Container;","map":{"version":3,"sources":["/Users/krystaljoysilvestre/Documents/flexible-grid/src/components/Grid/Container/container.js"],"names":["React","Component","Cell","C","Container","createCells","children","console","log","render","config","props","id","direction"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,OAAO,KAAKC,CAAZ,MAAmB,SAAnB;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAChCI,WADgC,GAClBC,QAAQ,IAAI;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,QAAhC,EADwB,CAGxB;AACA;AACA;AACA;AACA;AACD,KAT+B;AAAA;;AAWhCG,EAAAA,MAAM,GAAG;AAAA,UACCC,MADD,GACY,KAAKC,KADjB,CACCD,MADD;AAGP,WACE,oBAAC,CAAD,CAAG,OAAH;AAAW,MAAA,EAAE,EAAEA,MAAM,CAACE,EAAtB;AAA0B,MAAA,SAAS,EAAEF,MAAM,CAACG,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,MAAM,CAACJ,QAAP,IAAmB,KAAKD,WAAL,CAAiBK,MAAM,CAACJ,QAAxB,CADtB,CADF;AAKD;;AAnB+B;;AAsBlC,eAAeF,SAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport Cell from '../Cell';\n\nimport * as C from './style';\n\nclass Container extends Component {\n  createCells = children => {\n    console.log('CHILDREN =======', children);\n\n    // children.map((child, index) => (\n    //   <Cell key={index} id={child.id} config={child}>\n    //     {JSON.stringify(child)}\n    //   </Cell>\n    // ));\n  };\n\n  render() {\n    const { config } = this.props;\n\n    return (\n      <C.Wrapper id={config.id} direction={config.direction}>\n        {config.children && this.createCells(config.children)}\n      </C.Wrapper>\n    );\n  }\n}\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}