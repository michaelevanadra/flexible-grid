{"ast":null,"code":"import _slicedToArray from \"/Users/krystaljoysilvestre/Documents/tal/flexible-grid/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/krystaljoysilvestre/Documents/tal/flexible-grid/src/App.js\";\nimport React, { useState } from 'react';\nimport { Container, ButtonGroup } from 'reactstrap';\nimport { Banner } from './components/Banner';\nimport * as A from './style';\n\nfunction App() {\n  const _useState = useState('dark'),\n        _useState2 = _slicedToArray(_useState, 2),\n        themeMode = _useState2[0],\n        selectThemeMode = _useState2[1];\n\n  const ThemeContext = React.createContext(themeMode);\n  return React.createElement(ThemeContext.Provider, {\n    value: themeMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(A.Wrapper, {\n    theme: themeMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(A.Panel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(ButtonGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(A.Button, {\n    theme: themeMode,\n    active: themeMode === 'light',\n    onClick: () => selectThemeMode('light'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Light\"), React.createElement(A.Button, {\n    theme: themeMode,\n    active: themeMode === 'dark',\n    onClick: () => selectThemeMode('dark'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Dark\"))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/krystaljoysilvestre/Documents/tal/flexible-grid/src/App.js"],"names":["React","useState","Container","ButtonGroup","Banner","A","App","themeMode","selectThemeMode","ThemeContext","createContext"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,YAAvC;AAEA,SAASC,MAAT,QAAuB,qBAAvB;AAEA,OAAO,KAAKC,CAAZ,MAAmB,SAAnB;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACwBL,QAAQ,CAAC,MAAD,CADhC;AAAA;AAAA,QACNM,SADM;AAAA,QACKC,eADL;;AAGb,QAAMC,YAAY,GAAGT,KAAK,CAACU,aAAN,CAAoBH,SAApB,CAArB;AAEA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEA,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,CAAD,CAAG,OAAH;AAAW,IAAA,KAAK,EAAEA,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,CAAD,CAAG,KAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,CAAD,CAAG,MAAH;AACE,IAAA,KAAK,EAAEA,SADT;AAEE,IAAA,MAAM,EAAEA,SAAS,KAAK,OAFxB;AAGE,IAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,OAAD,CAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAQE,oBAAC,CAAD,CAAG,MAAH;AACE,IAAA,KAAK,EAAED,SADT;AAEE,IAAA,MAAM,EAAEA,SAAS,KAAK,MAFxB;AAGE,IAAA,OAAO,EAAE,MAAMC,eAAe,CAAC,MAAD,CAHhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,CADF,CADF,CADF,CADF,CADF;AAwKD;;AACD,eAAeF,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Container, ButtonGroup } from 'reactstrap';\n\nimport { Banner } from './components/Banner';\n\nimport * as A from './style';\n\nfunction App() {\n  const [themeMode, selectThemeMode] = useState('dark');\n\n  const ThemeContext = React.createContext(themeMode);\n\n  return (\n    <ThemeContext.Provider value={themeMode}>\n      <A.Wrapper theme={themeMode}>\n        <Container>\n          <A.Panel>\n            <ButtonGroup>\n              <A.Button\n                theme={themeMode}\n                active={themeMode === 'light'}\n                onClick={() => selectThemeMode('light')}\n              >\n                Light\n              </A.Button>\n              <A.Button\n                theme={themeMode}\n                active={themeMode === 'dark'}\n                onClick={() => selectThemeMode('dark')}\n              >\n                Dark\n              </A.Button>\n            </ButtonGroup>\n          </A.Panel>\n\n          {/* <A.Panel>\n            <h3>Reusable Component</h3>\n\n            <A.CodePanel theme={themeMode}>\n              <code>\n                {`import { GridParent, GridChild } from './path/to/Grid';`}\n              </code>\n              <br />\n              <br />\n              <code>{`function Grid() {`}</code>\n              <br />\n              <code>&nbsp;&nbsp;{`return (`}</code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n                {`<GridParent id=\"container\" direction=\"column\">`}\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                {`<GridChild id=\"first-child\" direction=\"column\" grow=\"2\" order=\"3\">`}\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <i>{`// another grid here`}</i>\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                {`</GridChild>`}\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                {`<GridChild id=\"second-child\" order=\"1\">`}\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <i>{`// element goes here`}</i>\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                {`</GridChild>`}\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                {`<GridChild id=\"third-child\" order=\"2\">`}\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <i>{`// element goes here`}</i>\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                {`</GridChild>`}\n              </code>\n              <br />\n              <code>&nbsp;&nbsp;&nbsp;&nbsp;{`</GridParent>`}</code>\n              <br />\n              <code>&nbsp;&nbsp;{`);`}</code>\n              <br />\n              <code>{`}`}</code>\n              <br />\n              <code>{`export default Grid;`}</code>\n            </A.CodePanel>\n\n            <h4>Properties</h4>\n            <A.CodePanel theme={themeMode}>\n              <code>{`GridParent.propTypes = {`}</code>\n              <br />\n              <code>&nbsp;&nbsp;{`id: PropTypes.string,`}</code>\n              <br />\n              <code>\n                &nbsp;&nbsp;{`direction: PropTypes.string,`}\n                <i>\n                  &nbsp;&nbsp;\n                  {`// orientation of child elements; row|row-reverse|column|column-reverse|initial|inherit`}\n                </i>\n              </code>\n              <br />\n              <code>&nbsp;&nbsp;{`items: PropTypes.array`}</code>\n              <br />\n              <code>{`};`}</code>\n              <br />\n              <br />\n              <code>{`GridChild.propTypes = {`}</code>\n              <br />\n              <code>&nbsp;&nbsp;{`id: PropTypes.string,`}</code>\n              <br />\n              <code>\n                &nbsp;&nbsp;{`direction: PropTypes.string,`}\n                <i>\n                  &nbsp;&nbsp;\n                  {`// orientation of child elements; row|row-reverse|column|column-reverse|initial|inherit`}\n                </i>\n              </code>\n              <br />\n              <code>&nbsp;&nbsp;{`items: PropTypes.array`}</code>\n              <br />\n              <code>\n                &nbsp;&nbsp;{`grow: PropTypes.string`}\n                <i>\n                  &nbsp;&nbsp;\n                  {`// n times grow among the siblings`}\n                </i>\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;{`shrink: PropTypes.string`}\n                <i>\n                  &nbsp;&nbsp;\n                  {`// n times shrink among the siblings`}\n                </i>\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;{`basis: PropTypes.string`}\n                <i>\n                  &nbsp;&nbsp;\n                  {`// sets initial width`}\n                </i>\n              </code>\n              <br />\n              <code>\n                &nbsp;&nbsp;{`order: PropTypes.string`}\n                <i>\n                  &nbsp;&nbsp;\n                  {`// order among siblings`}\n                </i>\n              </code>\n\n              <br />\n              <code>{`};`}</code>\n            </A.CodePanel>\n          </A.Panel> */}\n        </Container>\n      </A.Wrapper>\n    </ThemeContext.Provider>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}